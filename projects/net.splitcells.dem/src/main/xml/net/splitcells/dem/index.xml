<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/den.xsd"
         xmlns:d="http://splitcells.net/den.xsd" xmlns:p="http://splitcells.net/private.xsd"
         xmlns:s="http://splitcells.net/sew.xsd" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:g="http://splitcells.net/gal.xsd" xmlns:foaf="http://xmlns.com/foaf/0.1/"
         xmlns:n="http://splitcells.net/natural.xsd"
         xmlns:e="http://splitcells.net/sen.xsd">
    <name>Dependency Manager</name>
    <name>dem</name>
    <solution>
        <scheduling>
            <queues>
                <priority>
                    <toDo>Clean up ConfigurationI.
                        <toDo>Create to validate framework.</toDo>
                    </toDo>
                    <toDo>Support deterministic mode.
                        <toDo>Maps</toDo>
                        <toDo>Sets</toDo>
                    </toDo>
                    <toDo>Create echo paging, when Domsole outputs to file.</toDo>
                    <toDo>Fix up code guide lines.</toDo>
                    <toDo>Make unit tests.</toDo>
                    <toDo xl:href="https://www.heise.de/developer/meldung/Fuzzing-fuer-alle-Google-verwandelt-ClusterFuzz-in-ein-Open-Source-Projekt-4301744.html">
                        Use fuzzy testing.
                    </toDo>
                    <toDo>Simple aspect oriented programming.
                        <toDo>Check consistency.</toDo>
                        <toDo>Implement test injection.</toDo>
                    </toDo>
                    <toDo>Console should print message asynchronously.</toDo>
                    <toDo>Implement test injection and recursive test injection.</toDo>
                    <toDo>Create functional effect system.</toDo>
                </priority>
            </queues>
            <service xl:href="compatibilty-and-portability.xml"/>
        </scheduling>
        <unscheduled>
            <toDo>Why are certain things done? i.e. object factory with static
                interface
            </toDo>
            <toDo>Split class functionality into different independent classes for dependency,
                configuration and resource management.
            </toDo>
            <idea>Implement static interface.</idea>
            <toDo>
                Standardize usage of down and up casting.
                <toDo>Covariance and Contravariance</toDo>
            </toDo>
        </unscheduled>
        <objective>
            <objective>Support automatic refactoring.</objective>
            <objective>Provide an environment for programs that acts as an generic interface
                and abstracts away implementation details of the environment.
                Environment is implemented via interfaces and object, but only accessed via interfaces.
                Implement side effects like input and output only over this environment.
                <toDo>Implement path, file and network connection system.</toDo>
            </objective>
            <objective>Minimize complexity.
                <objective>Maximize compatibility to other programming paradigms
                    and make it therefore easy to translate
                    automatically or manually to other languages.
                    <solution>Work with only one state variable.
                        <solution>Support different types of environment object variable.
                            <solution>Support environment object access via a variable that is
                                passed through everywhere.
                            </solution>
                            <solution>Support environment object access via a static variable.</solution>
                            <solution>Support environment object access via thread local variable.</solution>
                        </solution>
                    </solution>
                    <solution>Use no inheritance.</solution>
                    <solution>Use dependency injection via static methods.</solution>
                </objective>
                <solution>Minimize side effects.</solution>
                <solution>Split everything into core, merger, sheath, environment.
                    <solution>No explicit splitting in order to safe development resources.
                        It is enough to ensure, that it is possible to split everything at any given time,
                        with an acceptable amount of resources.
                    </solution>
                </solution>
            </objective>
        </objective>
        <val name="history" xl:href="./history.xml"/>
    </solution>
    <val name="logging">
        <solution>There is no differences between logs and console output.
        </solution>
        <toDo>End of log does not contain closing tag.</toDo>
        <toDo>Increase logging speed by making logging asynchronous.</toDo>
    </val>
    <val name="side-effects">
        <toDo>Create program system as effect system.
            <toDo>Create event processor.
                <toDo>Create event queue at processor.</toDo>
            </toDo>
            <toDo>Event processor executor.</toDo>
        </toDo>
        <s:article>
            <s:chapter>
                <s:title>Side Effects</s:title>
                <s:paragraph>Secondary side effects are parts of the programs which are undefined.
                    Primary side effects are modeled side effects that are explicitly caused by the program.
                </s:paragraph>
                <s:paragraph>Configuration of secondary effects are done with
                    secondary effects or the executor of the programs.
                    Configuration of primary effects are done via program arguments or the executor.
                </s:paragraph>
                <s:chapter>
                    <s:title>Program Dependencies</s:title>
                    <s:paragraph>There are runtime dependencies and compile time dependencies.
                        Runtime dependencies are arguments and configurations
                        for primary and secondary side effects.
                    </s:paragraph>
                </s:chapter>
            </s:chapter>
        </s:article>
    </val>
    <val name="support">
        <val name="programming.languages">
            <toDo>Transpile Java programs to Javascript and execute inside website.
                <toDo xl:href="https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/"/>
                <toDo xl:href="https://github.com/appcypher/awesome-wasm-langs#java"/>
                <toDo xl:href="https://github.com/konsoletyper/teavm"/>
                <toDo xl:href="https://github.com/i-net-software/JWebAssembly"/>
                <toDo xl:href="https://github.com/mirkosertic/Bytecoder"/>
            </toDo>
        </val>
    </val>
</project>