#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import subprocess
import sys
import argparse
import json
from pathlib import Path

# TODO Support relative path.
# TODO Support host.
# TODO By default abort on first error.
# TODO Add switch in order to skip already present folders.

def execute(relativePath, host, command):
	print(relativePath)
	command = command.replace('$subRepo', '')
	print('	' + command)
	returnCode = subprocess.call(command, shell='True')
	if returnCode != 0:
		print('Error processing repository with return code ' + str(returnCode) + '.')
		return False
	return True
def process(relativePath, host, command):
	if not execute(relativePath, host, command):
		return False
	subListPath=Path('./.net.splitcells.os.state.interface.repo/subs.json')
	if subListPath.is_file():
		# TODO Check if "!/.net.splitcells.os.state.interface.repo/" is present in gitignore. If not pr
		with open(subListPath, 'r') as subListFile:
			repoList=json.load(subListFile)
			for subName in repoList['subs'].keys():
				r='repo.process'
				# TODO Do not rely on Bash specific command syntax.
				subRepoScript = 'set -e; mkdir -p ' + subName + '; ' + 'cd ' + subName + ' ; ' + r + " --command='" + command + "' --host=" + host + ' --relative-path=' + relativePath
				subRepoScript = subRepoScript.replace('$subRepo', relativePath + '/' + subName + '/$subRepo')
				print('	' + subRepoScript)
				returnCode = subprocess.call(subRepoScript, shell='True')
				if returnCode != 0:
					print('Error processing sub repository with return code ' + str(returnCode) + '.')
					return False
	return True
if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='TODO')
	parser.add_argument('--relative-path', dest='relativePath', default='./')
	parser.add_argument('--host', dest='host', default="''")
	parser.add_argument('--command', dest='command', required=True)
	parsedArgs = parser.parse_args()
	if not process(parsedArgs.relativePath, parsedArgs.host, parsedArgs.command):
		exit(1)